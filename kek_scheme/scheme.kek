#include "reader.kek"
#include "parser.kek"

class Scheme {
	static var parser
	static var out
	static var wi
	static var env

	static Scheme() {
		out = Sys.out
	}

	static REPL() {
		var expr
		while(1) {
			try {
				wi.prompt = "> "
				expr = parser.read()
				if (!expr) {
					out.writeln("\n")
					break
				}
				expr = expr.eval(env)
				expr.print(out)
				if (expr.toString().length() != 0) {
					out.writeln("\n");
				}
			}
			catch (e) {
				switch (e.type()) {
				case ParserError:
					out.writeln(e.msg() + "\n")
				case EnvironmentError:
					out.writeln(e.msg() + e.sym.toString() + "\n")
				case EvalError: {
					out.writeln(e.msg() + ",\"")
					e.obj.print(out)
					out.writeln("\" given.\n")
				}
				case ArgumentNumError: {
					out.writeln(e.msg())
					out.writeln(String.fromInt(e.expected) + " expected, ")
					out.writeln(String.fromInt(e.given) + " given.\n")
				}
				default:
					throw e
				}
			}
		}
	}

	static main(args) {
		wi = new TermW(Sys.term)
		var rd = new Reader(wi)
		parser = new Parser(rd)

		env = new Environment()
		Environment.initBuiltinFunctions(env)
		REPL()
	}
}
