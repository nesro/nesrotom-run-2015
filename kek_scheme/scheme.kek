#include "reader.kek"
#include "parser.kek"

class Scheme {
	static var parser
	static var out
	static var wi
	static var env
	static var cmdArgs
	static var cmdArgPtr

	static Scheme() {
		out = Sys.out
	}

	static REPL() {
		var expr
		while(1) {
			try {
				wi.prompt = "> "
				expr = parser.read()
				if (!expr) break
				expr = expr.eval(env)
				if (!expr) break
				expr.print(out)
				if (expr.toString().length() != 0) {
					out.writeln("\n");
				}
			}
			catch (e) {
				switch (e.type()) {
				case ParserError:
					out.writeln(e.msg() + "\n")
				case EnvironmentError:
					out.writeln(e.msg() + e.sym.toString() + "\n")
				case EvalError: {
					out.writeln(e.msg() + ", \"")
					e.obj.print(out)
					out.writeln("\" given.\n")
				}
				case ArgumentNumError: {
					out.writeln(e.msg())
					out.writeln(String.fromInt(e.expected) + " expected, ")
					out.writeln(String.fromInt(e.given) + " given.\n")
				}
				default:
					throw e
				}
			}
		}
	}

	static main(args) {
		var rd, f
		cmdArgs = args
		if (args.length() >= 2) {
			cmdArgPtr = 2
		}
		else {
			cmdArgPtr = 1
		}
		env = new Environment()
		Environment.initBuiltinFunctions(env)
		Sys.srand(Sys.time())

		// Load init.scm
		try {
			f = new File("init.scm", "r")
			wi = new FileW(f)
			rd = new Reader(wi)
			parser = new Parser(rd)
			REPL()
			f.close()
		}
		catch (e) {
			out.writeln(e.msg())
			out.writeln("\n")
		}

		if (args.length() >= 2) {
			// Execute given script
			try {
				f = new File(args[1], "r")
				wi = new FileW(f)
				rd = new Reader(wi)
				parser = new Parser(rd)
				REPL()
				f.close()
				return 0
			}
			catch (e) {
				out.writeln(e.msg())
				out.writeln("\n")
			}
		}

		// Launch interactive shell
		wi = new TermW(Sys.term)
		rd = new Reader(wi)
		parser = new Parser(rd)
		REPL()
		out.writeln("\n")

		return 0
	}
}
