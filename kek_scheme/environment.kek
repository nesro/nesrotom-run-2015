class EnvironmentError : Exception {
	var sym
	EnvironmentError(msg, sym) {
		super(msg)
		this.sym = sym
	}
}

class Environment {
	var keys, values
	var numEntries
	var parentEnv

	static initBuiltinFunctions(env) {
		var bindings = [
			// Syntax:
			["define", scmDefine],
			["quote", scmQuote],
			["lambda", scmLambda],
			["if", scmIf],
			["when", scmWhen],
			["unless", scmUnless],
			["let", scmLet],
			["and", scmAnd],
			["or", scmOr],
			// Functions:
			["not", scmNotF],
			["cons", scmConsF],
			["car", scmCarF],
			["cdr", scmCdrF],
			["list", scmListF],
			["eval", scmEvalF],
			["+", scmPlusF],
			["-", scmMinusF],
			["*", scmTimesF],
			["eq?", scmEqF],
			["equal?", scmEqualF],
			["=", scmNumEqF],
			[">", scmGreaterF],
			["current-command-line-arguments", scmCmdArgsF],
			["vector-length", scmVectorLengthF],
			["vector-ref", scmVectorRefF],
			["open-input-file", scmOpenInputFileF],
			["open-output-file", scmOpenOutputFileF],
			["close-input-port", scmCloseFileF],
			["close-output-port", scmCloseFileF],
			["read-line", scmReadLineF],
			["write", scmWriteF],
			["writeln", scmWritelnF],
			["string-split", scmStringSplitF],
			["string-replace", scmStringReplaceF],
			["string-append", scmStringAppendF],
			["string=?", scmStringEqF],
			["string->symbol", scmStringToSymbolF],
			["print", scmPrintF],
			["display", scmDisplayF],
			["newline", scmNewlineF],
			["exit", scmExitF],
			["apply", scmApplyF],
			["random", scmRandomF]
		]

		var i
		for (i = 0; i < bindings.length(); i++) {
			var name = bindings[i][0]
			var object = bindings[i][1]
			//Sys.out.writeln(name + ": " + String.fromSymbol(object) + "\n")
			env.set(scmSymbol.getSym(name), Meta._new(object, nil))
			// Meta._new generates "new" expression at runtime.
			// It takes a symbol (name of the class/constructor)
			// and an array of constructor arguments (or nil)
		}
	}

	Environment() {
		numEntries = 0
		parentEnv = nil
		keys = []
		values = []
	}

	idx(key) {
		var i
		for (i = 0; i < numEntries; i++) {
			if (keys[i] == key) {
				return i
			}
		}
		return -1
	}

	get(key) {
		var i = idx(key)
		if (i >= 0) {
			return values[i]
		}
		else if (parentEnv != nil) {
			return parentEnv.get(key)
		}
		else {
			throw new EnvironmentError("No binding for key ", key)
		}
	}

	set(key, value) {
		var i = idx(key)
		if (i < 0) {
			i = numEntries
			keys[i] = key
			numEntries++
		}
		values[i] = value
	}
}
