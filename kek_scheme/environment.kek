class EnvironmentError : Exception {
	var sym
	EnvironmentError(msg, sym) {
		super(msg)
		this.sym = sym
	}
}

class Environment {
	var keys, values
	var numEntries
	var parentEnv

	static initBuiltinFunctions(env) {
		env.set(scmSymbol.getSym("define"), new scmDefine())
		env.set(scmSymbol.getSym("quote"), new scmQuote())
		env.set(scmSymbol.getSym("lambda"), new scmLambda())
		env.set(scmSymbol.getSym("if"), new scmIf())
		env.set(scmSymbol.getSym("when"), new scmWhen())
		env.set(scmSymbol.getSym("unless"), new scmUnless())
		env.set(scmSymbol.getSym("let"), new scmLet())

		env.set(scmSymbol.getSym("cons"), new scmConsF())
		env.set(scmSymbol.getSym("car"), new scmCarF())
		env.set(scmSymbol.getSym("cdr"), new scmCdrF())
		env.set(scmSymbol.getSym("list"), new scmListF())
		env.set(scmSymbol.getSym("eval"), new scmEvalF())
		env.set(scmSymbol.getSym("+"), new scmPlusF())
		env.set(scmSymbol.getSym("-"), new scmMinusF())
		env.set(scmSymbol.getSym("*"), new scmTimesF())
		env.set(scmSymbol.getSym("eq?"), new scmEqF())
		env.set(scmSymbol.getSym("="), new scmNumEqF())
		env.set(scmSymbol.getSym("current-command-line-arguments"), new scmCmdArgsF())
		env.set(scmSymbol.getSym("vector-length"), new scmVectorLengthF())
		env.set(scmSymbol.getSym("vector-ref"), new scmVectorRefF())
		env.set(scmSymbol.getSym("open-input-file"), new scmOpenInputFileF())
		env.set(scmSymbol.getSym("close-input-port"), new scmCloseFileF())
		env.set(scmSymbol.getSym("read-line"), new scmReadLineF())
		env.set(scmSymbol.getSym("string-split"), new scmStringSplitF())
		env.set(scmSymbol.getSym("string-replace"), new scmStringReplaceF())
		env.set(scmSymbol.getSym("string-append"), new scmStringAppendF())
		env.set(scmSymbol.getSym("string=?"), new scmStringEqF())
		env.set(scmSymbol.getSym("print"), new scmPrintF())
		env.set(scmSymbol.getSym("newline"), new scmNewlineF())
		env.set(scmSymbol.getSym("exit"), new scmExitF())
	}

	Environment() {
		numEntries = 0
		parentEnv = nil
		keys = []
		values = []
	}

	idx(key) {
		var i
		for (i = 0; i < numEntries; i++) {
			if (keys[i] == key) {
				return i
			}
		}
		return -1
	}

	get(key) {
		var i = idx(key)
		if (i >= 0) {
			return values[i]
		}
		else if (parentEnv != nil) {
			return parentEnv.get(key)
		}
		else {
			throw new EnvironmentError("No binding for key ", key)
		}
	}

	set(key, value) {
		var i = idx(key)
		if (i < 0) {
			i = numEntries
			keys[i] = key
			numEntries++
		}
		values[i] = value
	}
}
